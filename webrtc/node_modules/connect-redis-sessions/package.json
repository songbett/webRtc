{
  "author": {
    "name": "mp,",
    "email": "mp@tcs.de",
    "url": "www.tcs.de"
  },
  "name": "connect-redis-sessions",
  "description": "Session store using redis-sessions for Connect",
  "version": "1.0.2",
  "homepage": "https://github.com/mpneuried/connect-redis-sessions",
  "private": false,
  "repository": {
    "type": "git",
    "url": "git://github.com/mpneuried/connect-redis-sessions.git"
  },
  "engines": {
    "node": "> 0.8.20"
  },
  "scripts": {
    "test": "node test.js"
  },
  "dependencies": {
    "redis-sessions": "*",
    "buffer-crc32": "0.2.x",
    "pause": "0.0.x",
    "express-session": "1.0.x"
  },
  "devDependencies": {
    "express": "4.x",
    "body-parser": "1.x",
    "cookie-parser": "1.x",
    "morgan": "1.x",
    "connect": "*",
    "grunt": "0.4.x",
    "grunt-regarde": "*",
    "grunt-contrib-coffee": "*",
    "grunt-include-replace": "*"
  },
  "readme": "connect-redis-sessions\n======================\n\nIs a connect or express middleware to simply use the [redis sessions](https://github.com/smrchy/redis-sessions).\nWith [redis sessions](https://github.com/smrchy/redis-sessions) you can handle multiple sessions per user_id.\n\n## Example\n\n```js\n// get the modules\nvar express = require( \"express\" );\nvar cookieParser = require( \"cookie-parser\" );\nvar ConnectRedisSessions = require( \"connect-redis-sessions\" );\nvar app = express();\n\n\n// configute express\napp\n\t.use( express.query() )\n\t.use( cookieParser() )\n\t.use( ConnectRedisSessions( { app: \"myappname\" } ) )\n\n// listen for requests\napp.use( function( req, res ){\n\tif( req.query.login ){\n\t\t// upgrade a session to a redis session by a user id\n\t\treq.session.upgrade( req.query.user_id );\n\t}\n\tif( req.sessin.id && req.query.logout ){\n\t\t// kill the active session\n\t\treq.session.destroy();\n\t}\n\tres.end( \"Hello express redis sessions\" );\n});\n```\n\n## Installation\n\n`npm install connect-redis-sessions`\n\n## Usage\n\n1. you have to get the express middleware init method by\t\n`var ConnectRedisSessions = require( \"connect-redis-sessions\" );`\n2. init your express or express server\t\n`var app = require( \"express\" )();`\n3. init the express cookie parser\t\n`app.use( express.cookieParser() );`\n4. use express redis sessions as middleware\t\n`app.use( ConnectRedisSessions( { app: \"myappname\" } ) );`\n\n<span style=\"color:red\">**Attension:**</span>\nIf you're using Express < 4.x then please use version `0.x` otherwise use version `1.x` of `connect-redis-sessions`.\nIt schould work with connect and the older Express, but there could be eventual issues due to the new Express 4.x api behaviour i haven't found yet.\n\n## Initialisation\n\n**`ConnectRedisSessions( options )`**\n\nTo init the session handling just add the options object as argument.\n\n### Options\n\n- **app** : *( `String|Function` required )*\t\nA simple string as appname or a function to calc the name on every request.\t\nThe function addes to arguments `req` and `callback`.\n```js\n_getAppName = function( req, callback ){ callback( null, \"staticname\" ) };\n```\n- **cookie** : *( `Object` )*\t\nCookie configuration. If nothing is set a browser session cookie will be used.\n\t- **maxAge** *( `Number` )*\t\n\tThe maximum age of the generated cookie.\n\t- **path** *( `String`, default = `/` )*\t\n\tThe cookie path\n\t- **httpOnly** *( `String`, default = true )*\t\n- **trustProxy** : *( `Boolean`, default = `false` )*\nOnly accept https cookies\n- **port** : *( `Number`, default = `6379` )*\nRedis port\n- **host** : *( `String`, default = `127.0.0.1` )*\nRedis host\n- **namespace** : *( `String`, default = `rs` )*\nThe namespace prefix for all Redis keys used by the redis session module.\n- **wipe** : *( `Number`, default = `600` )*\nThe interval in second after which the timed out redis sessions are wiped. No value less than 10 allowed.\n- **ttl** : *( `Number`, default = `7200` )*\nRedis session timeout to wipe the session on idle time\n\n\n## Session Object\n\nAfter you have initializes the session handling every connect/express request object will contain a key called `session`.\nWithin this Object you cann save rudimental keys of types `String`, `Number` and `Boolean`.\nThese keys will be saved at the end of the request and will be availible within the next request.\n\n**And there are some additional methods and metadata**\n\n### Properties\n\n- **req.session.id** : *( `String` )*\nYour session token\n- **req.session.d** : *( `Object` )*\nJust a small helper to get all data woithin the session without handling the properties and method names. All keys under `req.session.d[ ? ]` will also be availible under `req.session[ ? ]`\n- **req.session._meta** : *( `Object` )*\t\nContains the redis sessions meta data.\n\t- **id** : ( `String|Number` )\t\n\tthe global user id\n\t- **r** : ( `Number` )\n\tthe session read count\n\t- **w** : ( `Number` )\n\tthe session write count\n\t- **idle** : ( `Number` )\n\tthe session idle time\n\t- **ttl** : ( `Number` )\n\tthe session ttl\n\n### Methods\n\n#### `req.session.upgrade( user_id [, cb] )`\n\nupgrade a empty session to a real redis session by upgrading the session with the user_id.\n \n**Arguments**\n\n* `user_id` : *( `String|Number` required )*: The user id this session shpuld belong to.\n* `cb` : *( `Function` optional )*: Callback method with the results.\n\n#### `req.session.soid( [ dt,] cb )`\n\nGet all session of the logged in id.\n \n**Arguments**\n\n* `cb` : *( `Function` )*: Callback method with the results.\n\n#### `req.session.soapp( [ dt,] cb )`\n\nGet all session of an app.\n \n**Arguments**\n\n* `dt` : *( `Function` default = `600` )*: Get the app session history back in seconds.\n* `cb` : *( `Function` )*: Callback method with the results.\n\n#### `req.session.activity( [ dt,] cb )`\n\nQuery the amount of active session within the last 10 minutes (600 seconds).\n \n**Arguments**\n\n* `dt` : *( `Function` default = `600` )*: Get the app activity history back in seconds.\n* `cb` : *( `Function` )*: Callback method with the results.\n\n#### `req.session.destroy( [ cb ] )`\n\nKill the current active session\n \n**Arguments**\n\n* `cb` : *( `Function` optional )*: Callback method.\n\n#### `req.session.destroyall( [ cb ] )`\n\nKill ALL session of the given user_id.\n \n**Arguments**\n\n* `cb` : *( `Function` optional )*: Callback method.\n\n#### `req.session.save( [ cb ] )`\n\nChanged session data will allways be saved at the end of a request.\nBut with this method you can force the saving of the session object to redis-sessions.\n \n**Arguments**\n\n* `cb` : *( `Function` optional )*: Callback method.\n\n#### `req.session.reload( [ cb ] )`\n\nReload the session from redis sessions\n \n**Arguments**\n\n* `cb` : *( `Function` optional )*: Callback method.\n\n#### `req.session.getRedisSessionsModule()`\n\nWill return the internal instance of [RedisSessions](https://github.com/smrchy/redis-sessions).\nYou can use this to handle sessions of other users.\n \n**Returns**\n\n*( `RedisSessions` )*: The raw redis sessions module.\n\n## Examples\n\n### advanced init\n\n```js\n// get the modules\nvar express = require( \"express\" );\nvar cookieParser = require( \"cookie-parser\" );\nvar bodyParser = require( \"body-parser\" );\nvar logger = require( \"morgan\" );\nvar ConnectRedisSessions = require( \"connect-redis-sessions\" );\nvar app = express();\n\n// get the appname by the first part of the url\n_getAppName = function(req, cb) {\n\tvar appname;\n\tappname = req._parsedUrl.pathname.split(\"/\")[1];\n\tif (appname != null) {\n\t\tcb(null, appname);\n\t} else {\n\t\t// if nothing is returned a empty session will be availible\n\t\tcb(null);\n\t}\n};\n\n// configute express\n_timeSecDay = 60 * 60 * 24\napp\n\t.use( logger( \"dev\" ) )\n\t.use( express.query() )\n\t.use( bodyParser() )\n\t.use( cookieParser() )\n\t.use( ConnectRedisSessions( { app: \"myappname\", ttl: _timeSecDay, cookie: { maxAge: _timeSecDay * 1000 } } ) )\n\n// listen for requests\napp.use( function( req, res ){\n\tconsole.log( req.session );/*\n\t\t{\n\t\t\t\"id\": null,\n\t\t\t\"d\": {}\n\t\t}\n\t*/\n\tres.end( \"no knwon user\" );\n});\n```\n\n### check for a logged in user\n\n```js\n// listen for requests\napp.use( function( req, res ){\n\tif( req.session.id == void( 0 ) ){\n\t\tres.end( \"user not logged in\" );\n\t} else {\n\t\tres.end( \"user \" + req.session._meta.id + \" is logged in\" );\n\t}\n});\n```\n\n### upgrade a session with a user_id\n\n```js\n// listen for requests\napp.use( function( req, res ){\n\tvar user_id = \"myuser_id\" // code to get your user_id \n\treq.session.upgrade( user_id, function(){\n\t\tconsole.log( req.session );/*\n\t\t\t{\n\t\t\t\t\"id\": \"myuser_id\",\n\t\t\t\t\"d\": {},\n\t\t\t\t\"_meta\": {\n\t\t\t\t\t\"id\": \"myuser_id\",\n\t\t\t\t\t\"r\": 1,\n\t\t\t\t\t\"w\": 1,\n\t\t\t\t\t\"ttl\": 86400,\n\t\t\t\t\t\"idle\": 0\n\t\t\t\t}\n\t\t\t}\n\t\t*/\n\t\tres.end( \"user \" + user_id + \" has logged in\" );\n\t}); \n});\n```\n\n### write data to the session\n\n```js\n// listen for requests\napp.use( function( req, res ){\n\treq.session.meaning = 42;\n\treq.session.foo = \"bar\";\n\tconsole.log( req.session );/*\n\t\t{\n\t\t\t\"id\": \"myuser_id\",\n\t\t\t\"meaning\": 42,\n\t\t\t\"foo\": \"bar\",\n\t\t\t\"d\": {\n\t\t\t\t\"meaning\": 42,\n\t\t\t\t\"foo\": \"bar\"\n\t\t\t},\n\t\t\t\"_meta\": {\n\t\t\t\t\"id\": \"myuser_id\",\n\t\t\t\t\"r\": 2,\n\t\t\t\t\"w\": 1,\n\t\t\t\t\"ttl\": 86400,\n\t\t\t\t\"idle\": 10\n\t\t\t}\n\t\t}\n\t*/\n\tres.end( \"data written to session\" );\n\n});\n```\n\n### read data out of a session\n\n```js\n// listen for requests\napp.use( function( req, res ){\n\tres.end( \"session data \" + req.session.foo + \" says \" + req.session.meaning );\n\n});\n```\n\n### get all active user sessions\n\n```js\n// listen for requests\napp.use( function( req, res ){\n\treq.session.soid( function( err, sessions ){\n\t\tif( err ){\n\t\t\tres.end( \"ERROR\" );\n\t\t\treturn\n\t\t}\n\t\tres.end( JSON.stringify( sessions ) );/*\n\t\t\t[{\n\t\t\t\tid: 'myuser_id',\n\t\t\t\tr: 3,\n\t\t\t\tw: 2,\n\t\t\t\tttl: 86400,\n\t\t\t\tidle: 10\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'myuser_id',\n\t\t\t\tr: 1,\n\t\t\t\tw: 1,\n\t\t\t\tttl: 7200,\n\t\t\t\tidle: 56040\n\t\t\t}] \n\t\t*/\n\t});\n});\n```\n\n### kill a session\n\n```js\n// listen for requests\napp.use( function( req, res ){\n\treq.session.destroy()\n});\n```\n\n\n## Release History\n|Version|Date|Description|\n|:--:|:--:|:--|\n|v1.0.2|2014-04-25|Small bugfix for cookie handling|\n|v1.0.1|2014-03-17|Updated readme with external express/connect middleware|\n|v1.0.0|2014-03-17|fixed cookie set for express 4.x |\n|v0.2.0|2014-03-07|express 0.4.0 support |\n|v0.1.5|2013-12-04|Added method `SessionObject.getRedisSessionsModule()` to receive the internal redis session instance |\n|v0.1.4|2013-11-20|Fixed `No d supplied` error on upgrade|\n|v0.1.3|2013-10-15|Fixed error on missing callback|\n|v0.1.2|2013-10-15|Added example `check for a logged in user` to readme|\n|v0.1.1|2013-10-15|Fixed module to be compatible with express and changed readme examples from connect to express|\n|v0.1.0|2013-10-04|Initial commit|\n\n## Related Projects\n|Name|Description|\n|:--|:--|\n|[**redis-sessions**](https://github.com/smrchy/redis-sessions)|The redis session module this middleware module is based on|\n|[**tcs_node_auth**](https://github.com/mpneuried/tcs_node_auth)|Authentication module to handle login and register with a integrated mail double-opt-in logic.|\n\n## The MIT License (MIT)\n\nCopyright © 2013 Mathias Peter, http://www.tcs.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mpneuried/connect-redis-sessions/issues"
  },
  "_id": "connect-redis-sessions@1.0.2",
  "_from": "connect-redis-sessions@"
}
